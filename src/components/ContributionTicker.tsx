import React, { useEffect, useState } from 'react';
import { Clock } from 'lucide-react';

// Types for our contributions
interface Location {
  country: string;
  flag: string;
  city: string;
}

interface Contribution {
  id: number;
  name: string;
  amount: number;
  timestamp: string;
  location: Location;
  action: string;
}

// Action messages for contributions
const contributionActions = [
  "fez a leitura e contribuiu com",
  "recebeu a orientaÃ§Ã£o e contribuiu com",
  "agradeceu a consulta com",
  "consultou o orÃ¡culo e contribuiu com",
  "apreciou a sabedoria e doou",
  "recebeu as respostas e enviou"
];

// Action message for deck purchases
const deckPurchaseAction = "comprou o baralho por";

// International locations with countries, flags, and cities
const locations: Location[] = [
  // Brazil
  { country: 'Brasil', flag: 'ðŸ‡§ðŸ‡·', city: 'SÃ£o Paulo' },
  { country: 'Brasil', flag: 'ðŸ‡§ðŸ‡·', city: 'Rio de Janeiro' },
  { country: 'Brasil', flag: 'ðŸ‡§ðŸ‡·', city: 'Belo Horizonte' },
  { country: 'Brasil', flag: 'ðŸ‡§ðŸ‡·', city: 'BrasÃ­lia' },
  { country: 'Brasil', flag: 'ðŸ‡§ðŸ‡·', city: 'Salvador' },
  { country: 'Brasil', flag: 'ðŸ‡§ðŸ‡·', city: 'Curitiba' },
  { country: 'Brasil', flag: 'ðŸ‡§ðŸ‡·', city: 'Fortaleza' },
  { country: 'Brasil', flag: 'ðŸ‡§ðŸ‡·', city: 'Recife' },
  // Portugal
  { country: 'Portugal', flag: 'ðŸ‡µðŸ‡¹', city: 'Lisboa' },
  { country: 'Portugal', flag: 'ðŸ‡µðŸ‡¹', city: 'Porto' },
  { country: 'Portugal', flag: 'ðŸ‡µðŸ‡¹', city: 'Braga' },
  { country: 'Portugal', flag: 'ðŸ‡µðŸ‡¹', city: 'Coimbra' },
  // USA
  { country: 'Estados Unidos', flag: 'ðŸ‡ºðŸ‡¸', city: 'Nova York' },
  { country: 'Estados Unidos', flag: 'ðŸ‡ºðŸ‡¸', city: 'Los Angeles' },
  { country: 'Estados Unidos', flag: 'ðŸ‡ºðŸ‡¸', city: 'Chicago' },
  { country: 'Estados Unidos', flag: 'ðŸ‡ºðŸ‡¸', city: 'Miami' },
  // UK
  { country: 'Reino Unido', flag: 'ðŸ‡¬ðŸ‡§', city: 'Londres' },
  { country: 'Reino Unido', flag: 'ðŸ‡¬ðŸ‡§', city: 'Manchester' },
  { country: 'Reino Unido', flag: 'ðŸ‡¬ðŸ‡§', city: 'Liverpool' },
  { country: 'Reino Unido', flag: 'ðŸ‡¬ðŸ‡§', city: 'Edimburgo' },
  // Spain
  { country: 'Espanha', flag: 'ðŸ‡ªðŸ‡¸', city: 'Madrid' },
  { country: 'Espanha', flag: 'ðŸ‡ªðŸ‡¸', city: 'Barcelona' },
  { country: 'Espanha', flag: 'ðŸ‡ªðŸ‡¸', city: 'ValÃªncia' },
  { country: 'Espanha', flag: 'ðŸ‡ªðŸ‡¸', city: 'Sevilha' },
  // France
  { country: 'FranÃ§a', flag: 'ðŸ‡«ðŸ‡·', city: 'Paris' },
  { country: 'FranÃ§a', flag: 'ðŸ‡«ðŸ‡·', city: 'Marselha' },
  { country: 'FranÃ§a', flag: 'ðŸ‡«ðŸ‡·', city: 'Lyon' },
  { country: 'FranÃ§a', flag: 'ðŸ‡«ðŸ‡·', city: 'Nice' },
  // Germany
  { country: 'Alemanha', flag: 'ðŸ‡©ðŸ‡ª', city: 'Berlim' },
  { country: 'Alemanha', flag: 'ðŸ‡©ðŸ‡ª', city: 'Munique' },
  { country: 'Alemanha', flag: 'ðŸ‡©ðŸ‡ª', city: 'Frankfurt' },
  { country: 'Alemanha', flag: 'ðŸ‡©ðŸ‡ª', city: 'Hamburgo' },
  // Italy
  { country: 'ItÃ¡lia', flag: 'ðŸ‡®ðŸ‡¹', city: 'Roma' },
  { country: 'ItÃ¡lia', flag: 'ðŸ‡®ðŸ‡¹', city: 'MilÃ£o' },
  { country: 'ItÃ¡lia', flag: 'ðŸ‡®ðŸ‡¹', city: 'FlorenÃ§a' },
  { country: 'ItÃ¡lia', flag: 'ðŸ‡®ðŸ‡¹', city: 'Veneza' },
  // Japan
  { country: 'JapÃ£o', flag: 'ðŸ‡¯ðŸ‡µ', city: 'TÃ³quio' },
  { country: 'JapÃ£o', flag: 'ðŸ‡¯ðŸ‡µ', city: 'Osaka' },
  { country: 'JapÃ£o', flag: 'ðŸ‡¯ðŸ‡µ', city: 'Kyoto' },
  { country: 'JapÃ£o', flag: 'ðŸ‡¯ðŸ‡µ', city: 'Yokohama' },
  // Australia
  { country: 'AustrÃ¡lia', flag: 'ðŸ‡¦ðŸ‡º', city: 'Sydney' },
  { country: 'AustrÃ¡lia', flag: 'ðŸ‡¦ðŸ‡º', city: 'Melbourne' },
  { country: 'AustrÃ¡lia', flag: 'ðŸ‡¦ðŸ‡º', city: 'Brisbane' },
  { country: 'AustrÃ¡lia', flag: 'ðŸ‡¦ðŸ‡º', city: 'Perth' }
];

// Names from different countries
const names = [
  // Brazilian names
  'JoÃ£o Silva',
  'Maria Oliveira',
  'Pedro Santos',
  'Ana Costa',
  'Carlos Pereira',
  'Juliana Ferreira',
  'Lucas Rodrigues',
  'Fernanda Almeida',
  'Marcos Souza',
  'Camila Lima',
  'Rafael Gomes',
  'Bruna Carvalho',
  'Gustavo Martins',
  'Amanda Ribeiro',
  'Felipe AraÃºjo',
  // Portuguese names
  'AntÃ³nio Ferreira',
  'Manuel Carvalho',
  'Ricardo Machado',
  'Sofia Pinto',
  'Margarida Costa',
  // American names
  'John Smith',
  'Michael Johnson',
  'Robert Williams',
  'Emily Davis',
  'Sarah Brown',
  // British names
  'James Wilson',
  'William Taylor',
  'Thomas Harris',
  'Elizabeth Clark',
  'Charlotte Lewis',
  // Spanish names
  'Miguel GonzÃ¡lez',
  'Alejandro RodrÃ­guez',
  'David LÃ³pez',
  'LucÃ­a MartÃ­nez',
  'SofÃ­a GarcÃ­a',
  // French names
  'Jean Dupont',
  'Pierre Martin',
  'Michel Bernard',
  'Marie Dubois',
  'Sophie Petit',
  // German names
  'Hans MÃ¼ller',
  'Klaus Schmidt',
  'Wolfgang Schneider',
  'Anna Fischer',
  'Helga Wagner',
  // Italian names
  'Giuseppe Rossi',
  'Marco Bianchi',
  'Antonio Romano',
  'Maria Ferrari',
  'Sofia Marino',
  // Japanese names
  'Hiroshi Tanaka',
  'Akira Suzuki',
  'Yuki Sato',
  'Haruka Takahashi',
  'Yuko Watanabe',
  // Australian names
  'Jack Wilson',
  'Matthew Johnson',
  'Daniel Smith',
  'Emily Brown',
  'Olivia Taylor'
];

// Generate a random amount - either a regular contribution (9.93-93.93) or a deck purchase (393.93)
const getRandomAmount = (): number => {
  // 80% chance for regular contribution, 20% chance for deck purchase
  if (Math.random() < 0.8) {
    // Generate a regular contribution between 9.93 and 93.93
    const amount = Math.random() * (93.93 - 9.93) + 9.93;
    // Round to 2 decimal places
    return Math.round(amount * 100) / 100;
  } else {
    // Deck purchase - fixed at 393.93
    return 393.93;
  }
};

// Generate a random timestamp within the last 30 minutes
const getRandomTimestamp = (): string => {
  const now = new Date();
  // Generate a random time between 0 and 30 minutes ago
  const minutesAgo = Math.floor(Math.random() * 30);
  const timeAgo = new Date(now.getTime() - (minutesAgo * 60 * 1000));
  
  return timeAgo.toLocaleTimeString('pt-BR', { 
    hour: '2-digit', 
    minute: '2-digit',
    second: '2-digit'
  });
};

// Get a random location
const getRandomLocation = (): Location => {
  return locations[Math.floor(Math.random() * locations.length)];
};

// Get a random name
const getRandomName = (): string => {
  return names[Math.floor(Math.random() * names.length)];
};

// Get a random contribution action
const getRandomAction = (isDeckPurchase: boolean): string => {
  if (isDeckPurchase) {
    return deckPurchaseAction;
  } else {
    return contributionActions[Math.floor(Math.random() * contributionActions.length)];
  }
};

// Generate initial set of fake contributions
const generateContributions = (count: number): Contribution[] => {
  return Array.from({ length: count }, (_, i) => {
    const amount = getRandomAmount();
    const isDeckPurchase = amount === 393.93;
    return {
      id: i,
      name: getRandomName(),
      amount: amount,
      timestamp: getRandomTimestamp(),
      location: getRandomLocation(),
      action: getRandomAction(isDeckPurchase)
    };
  });
};

export const ContributionTicker: React.FC = () => {
  const [contributions, setContributions] = useState<Contribution[]>(generateContributions(10));
  
  // Add a new contribution every 5-10 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      const amount = getRandomAmount();
      const isDeckPurchase = amount === 393.93;
      const newContribution = {
        id: Date.now(),
        name: getRandomName(),
        amount: amount,
        timestamp: getRandomTimestamp(),
        location: getRandomLocation(),
        action: getRandomAction(isDeckPurchase)
      };
      
      setContributions(prev => {
        // Keep the list at a reasonable size by removing the oldest entry
        const updated = [...prev, newContribution];
        if (updated.length > 15) {
          return updated.slice(1);
        }
        return updated;
      });
    }, Math.random() * 5000 + 5000); // Random interval between 5-10 seconds
    
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="relative w-full overflow-hidden bg-indigo-900/90 border-y border-purple-700/50 py-2 shadow-lg">
      <div className="animate-scroll flex whitespace-nowrap">
        {contributions.map((contribution, index) => (
          <div 
            key={contribution.id} 
            className="inline-flex items-center mx-8 text-purple-200"
          >
            <span className="inline-flex items-center bg-indigo-800/70 rounded-full px-3 py-1 text-yellow-400 text-sm font-medium mr-2">
              <Clock className="w-3 h-3 mr-1" />
              {contribution.timestamp}
            </span>
            <span className="mr-1">{contribution.location.flag}</span>
            <span className="font-medium mr-1">{contribution.name},</span>
            <span className="text-purple-300 mr-1">de {contribution.location.city},</span>
            <span className="text-purple-300 mr-1">
              {contribution.action}
            </span>
            <span className="font-bold text-yellow-400">R$ {contribution.amount.toFixed(2).replace('.', ',')}</span>
            {index < contributions.length - 1 && (
              <span className="mx-8 text-purple-600">â€¢</span>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default ContributionTicker;
